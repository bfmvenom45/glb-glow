import * as THREE from 'three';

export class GlowManager {
  constructor() {
    this.glowMeshes = [];
    this.originalMaterials = new Map(); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏
    this.pulseEnabled = false;
    this.pulseSpeed = 3.0;
    this.pulseIntensity = 1.0;
    this.glowMode = 'emissive'; // 'separate' –∞–±–æ 'emissive'
    
    this.params = {
      intensity: 2.9,
      hue: 0.06
    };
    
    // üéØ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–≤—ñ—á–µ–Ω–Ω—è
    this.glowSettings = {
      eyes: true,
      lights: true,
      transparent: true,
      emissive: true,
      all: false
    };
  }
  
  addInnerGlow(model) {
    this.clearGlowMeshes();
    
    if (!model) return;
    
    if (this.glowMode === 'emissive') {
      this.addEmissiveGlow(model);
    } else {
      this.addSeparateGlow(model);
    }
  }
  
  addEmissiveGlow(model) {
    // –ú–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –¥–ª—è –¥–æ–¥–∞–Ω–Ω—è emissive glow
    model.traverse((child) => {
      if (child.isMesh && child.material) {
        // üéØ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –î–õÔøΩ—è SUSANNA1 - —â–æ –º–∞—î —Å–≤—ñ—Ç–∏—Ç–∏—Å—è:
        const shouldGlow = this.shouldMeshGlow(child);
        
        if (shouldGlow) {
          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª
          if (!this.originalMaterials.has(child.uuid)) {
            this.originalMaterials.set(child.uuid, child.material.clone());
          }
          
          // –î–æ–¥–∞—î–º–æ emissive –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
          if (child.material.emissive) {
            const glowColor = new THREE.Color().setHSL(this.params.hue, 1, 0.3);
            child.material.emissive.copy(glowColor);
            child.material.emissiveIntensity = this.params.intensity * 0.1;
          }
          
          // –î–æ–¥–∞—î–º–æ –¥–æ bloom —à–∞—Ä—É
          child.layers.enable(1);
          this.glowMeshes.push(child); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
          
          console.log(`‚ú® –î–æ–¥–∞–Ω–æ —Å–≤—ñ—á–µ–Ω–Ω—è –¥–æ: ${child.name || '–±–µ–∑—ñ–º–µ–Ω–Ω–∏–π –º–µ—à'}`);
        }
      }
    });
    
    console.log(`–î–æ–¥–∞–Ω–æ emissive —Å–≤—ñ—á–µ–Ω–Ω—è –¥–æ ${this.glowMeshes.length} –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤`);
  }
  
  addSeparateGlow(model) {
    const meshesToProcess = [];
    
    // –ó–±—ñ—Ä —Ç—ñ–ª—å–∫–∏ —Ç–∏—Ö –º–µ—à—ñ–≤, —â–æ –º–∞—é—Ç—å —Å–≤—ñ—Ç–∏—Ç–∏—Å—è
    model.traverse((child) => {
      if (child.isMesh && this.shouldMeshGlow(child)) {
        meshesToProcess.push(child);
      }
    });
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–∫—Ä–µ–º–∏—Ö glow –º–µ—à—ñ–≤
    meshesToProcess.forEach(mesh => {
      try {
        const glowMaterial = new THREE.MeshBasicMaterial({
          color: new THREE.Color().setHSL(this.params.hue, 1, 0.5),
          transparent: true,
          opacity: 0.2,
          side: THREE.BackSide
        });
        
        const glowMesh = new THREE.Mesh(mesh.geometry, glowMaterial);
        glowMesh.scale.multiplyScalar(1.02);
        glowMesh.layers.enable(1); // Bloom —à–∞—Ä
        
        model.add(glowMesh);
        this.glowMeshes.push(glowMesh);
        
        console.log(`‚ú® –°—Ç–≤–æ—Ä–µ–Ω–æ –æ–∫—Ä–µ–º–∏–π glow –¥–ª—è: ${mesh.name || '–±–µ–∑—ñ–º–µ–Ω–Ω–∏–π –º–µ—à'}`);
        
      } catch (error) {
        console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ glow –¥–ª—è –º–µ—à–∞:', error);
      }
    });
    
    console.log(`–î–æ–¥–∞–Ω–æ –æ–∫—Ä–µ–º–µ —Å–≤—ñ—á–µ–Ω–Ω—è –¥–æ ${this.glowMeshes.length} –º–µ—à—ñ–≤`);
  }
  
  clearGlowMeshes() {
    if (this.glowMode === 'emissive') {
      // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏
      this.glowMeshes.forEach(mesh => {
        const originalMaterial = this.originalMaterials.get(mesh.uuid);
        if (originalMaterial && mesh.material) {
          mesh.material = originalMaterial;
        }
        mesh.layers.disable(1);
      });
      this.originalMaterials.clear();
    } else {
      // –í–∏–¥–∞–ª—è—î–º–æ –æ–∫—Ä–µ–º—ñ glow –º–µ—à–∏
      this.glowMeshes.forEach(mesh => {
        if (mesh.parent) {
          mesh.parent.remove(mesh);
        }
        if (mesh.geometry) {
          mesh.geometry.dispose();
        }
        if (mesh.material) {
          mesh.material.dispose();
        }
      });
    }
    this.glowMeshes = [];
  }
  
  updateParams(params) {
    Object.assign(this.params, params);
    
    if (this.glowMode === 'emissive') {
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è emissive –∫–æ–ª—å–æ—Ä—É
      this.glowMeshes.forEach(mesh => {
        if (mesh.material && mesh.material.emissive) {
          const glowColor = new THREE.Color().setHSL(this.params.hue, 1, 0.3);
          mesh.material.emissive.copy(glowColor);
          mesh.material.emissiveIntensity = this.params.intensity * 0.1;
        }
      });
    } else {
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –æ–∫—Ä–µ–º–∏—Ö glow –º–µ—à—ñ–≤
      this.glowMeshes.forEach(mesh => {
        if (mesh.material) {
          mesh.material.color.setHSL(this.params.hue, 1, 0.5);
        }
      });
    }
  }
  
  setGlowMode(mode) {
    this.glowMode = mode;
    console.log('Glow —Ä–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞:', mode);
  }
  
  getGlowMode() {
    return this.glowMode;
  }
  
  setPulseEnabled(enabled) {
    this.pulseEnabled = enabled;
    console.log('–ü—É–ª—å—Å–∞—Ü—ñ—è', enabled ? '—É–≤—ñ–º–∫–Ω–µ–Ω–∞' : '–≤–∏–º–∫–Ω–µ–Ω–∞');
  }
  
  update() {
    if (!this.pulseEnabled || this.glowMeshes.length === 0) {
      return;
    }
    
    const time = Date.now() * 0.001;
    const pulse = Math.sin(time * this.pulseSpeed) * 0.5 + 0.5;
    const intensity = this.params.intensity * (0.5 + pulse * this.pulseIntensity);
    
    if (this.glowMode === 'emissive') {
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è emissive –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π
      this.glowMeshes.forEach(mesh => {
        if (mesh.material && mesh.material.emissive) {
          const glowColor = new THREE.Color().setHSL(this.params.hue, 1, 0.3 + intensity * 0.1);
          mesh.material.emissive.copy(glowColor);
          mesh.material.emissiveIntensity = intensity * 0.15;
        }
      });
    } else {
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–∫—Ä–µ–º–∏—Ö glow –º–µ—à—ñ–≤
      this.glowMeshes.forEach(mesh => {
        if (mesh.material) {
          const lightness = 0.3 + intensity * 0.2;
          mesh.material.color.setHSL(this.params.hue, 1, lightness);
          mesh.material.opacity = 0.4 + intensity * 0.2;
        }
      });
    }
  }
  
  // üéØ –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø - –©–û –ú–ê–Ñ –°–í–Ü–¢–ò–¢–ò–°–Ø
  shouldMeshGlow(mesh) {
    // –Ø–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ "–≤—Å—ñ –æ–±'—î–∫—Ç–∏" - —Å–≤—ñ—Ç–∏—Ç—å—Å—è –≤—Å–µ
    if (this.glowSettings.all) {
      return true;
    }
    
    // ========== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –î–õ–Ø SUSANNA1 ==========
    
    // 1Ô∏è‚É£ –ü–æ –Ω–∞–∑–≤—ñ –æ–±'—î–∫—Ç–∞ (–Ω–∞–π—Ç–æ—á–Ω—ñ—à–∏–π —Å–ø–æ—Å—ñ–±)
    if (mesh.name && this.glowSettings.eyes) {
      const name = mesh.name.toLowerCase();
      
      // –°–≤—ñ—Ç—è—Ç—å—Å—è –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ —Ç–∞–∫–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏:
      const eyeNames = ['eye', 'pupil', 'iris'];
      const hasEyeName = eyeNames.some(keyword => name.includes(keyword));
      if (hasEyeName) {
        console.log(`üëÅÔ∏è –ó–Ω–∞–π–¥–µ–Ω–æ –æ—á—ñ –¥–ª—è —Å–≤—ñ—á–µ–Ω–Ω—è: ${mesh.name}`);
        return true;
      }
    }
    
    if (mesh.name && this.glowSettings.lights) {
      const name = mesh.name.toLowerCase();
      
      // –°–≤—ñ—Ç—è—Ç—å—Å—è —Å–≤—ñ—Ç–ª–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏:
      const lightNames = [
        'light', 'glow', 'emission', 'lamp', 'bulb', 
        'neon', 'screen', 'display', 'led', 'torch'
      ];
      const hasLightName = lightNames.some(keyword => name.includes(keyword));
      if (hasLightName) {
        console.log(`üí° –ó–Ω–∞–π–¥–µ–Ω–æ —Å–≤—ñ—Ç–ª–æ –¥–ª—è —Å–≤—ñ—á–µ–Ω–Ω—è: ${mesh.name}`);
        return true;
      }
    }
    
    // 2Ô∏è‚É£ –ü–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É (–ø—Ä–æ–∑–æ—Ä—ñ –∞–±–æ emissive)
    if (mesh.material) {
      const material = Array.isArray(mesh.material) ? mesh.material[0] : mesh.material;
      
      // –°–≤—ñ—Ç—è—Ç—å—Å—è –ø—Ä–æ–∑–æ—Ä—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏
      if (this.glowSettings.transparent && material.transparent && material.opacity < 0.9) {
        console.log(`üîç –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–∑–æ—Ä–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª –¥–ª—è —Å–≤—ñ—á–µ–Ω–Ω—è: ${mesh.name || '–±–µ–∑—ñ–º–µ–Ω–Ω–∏–π'}`);
        return true;
      }
      
      // –°–≤—ñ—Ç—è—Ç—å—Å—è –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∑ emissive –∫–æ–ª—å–æ—Ä–æ–º
      if (this.glowSettings.emissive && material.emissive && material.emissive.getHex() > 0) {
        console.log(`‚ú® –ó–Ω–∞–π–¥–µ–Ω–æ emissive –º–∞—Ç–µ—Ä—ñ–∞–ª –¥–ª—è —Å–≤—ñ—á–µ–Ω–Ω—è: ${mesh.name || '–±–µ–∑—ñ–º–µ–Ω–Ω–∏–π'}`);
        return true;
      }
    }
    
    // 3Ô∏è‚É£ –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –ù–ï —Å–≤—ñ—Ç–∏—Ç—å—Å—è
    return false;
  }
  
  // üîß –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–≤—ñ—Ç—ñ–Ω–Ω—è
  updateGlowSettings(settings) {
    this.glowSettings = { ...this.glowSettings, ...settings };
    console.log('üéØ –û–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–≤—ñ—Ç—ñ–Ω–Ω—è:', this.glowSettings);
  }
  
  dispose() {
    this.clearGlowMeshes();
  }
}