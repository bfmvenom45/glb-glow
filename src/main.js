import { SceneManager } from './modules/scene.js';
import { BloomManager } from './modules/bloom.js';
import { GlowManager } from './modules/glow.js';
import { ModelLoader } from './modules/loader.js';
import { UIManager } from './modules/ui.js';

class App {
  constructor() {
    this.canvas = document.getElementById('canvas');
    this.loadingIndicator = document.getElementById('loading-indicator');
    
    this.sceneManager = new SceneManager(this.canvas);
    this.bloomManager = new BloomManager(this.sceneManager);
    this.glowManager = new GlowManager();
    this.modelLoader = new ModelLoader();
    this.uiManager = new UIManager();
    
    this.currentModel = null;
    this.currentModelName = '016.glb';
    
    this.init();
  }
  
  async init() {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ü–µ–Ω–∏
    this.sceneManager.init();
    this.bloomManager.init();
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –º–æ–¥–µ–ª—ñ
    await this.loadModel(this.currentModelName);
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è UI
    this.setupUI();
    
    // –ó–∞–ø—É—Å–∫ –∞–Ω—ñ–º–∞—Ü—ñ—ó
    this.animate();
    
    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    this.setupEventListeners();
    
    // Drag & Drop —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
    this.setupDragAndDrop();
  }
  
  async loadModel(modelPath) {
    try {
      this.showLoading();
      this.uiManager.showNotification(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ ${modelPath}...`, 'info');
      
      // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –º–æ–¥–µ–ª—ñ
      if (this.currentModel) {
        this.sceneManager.scene.remove(this.currentModel);
        this.glowManager.clearGlowMeshes();
      }
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –º–æ–¥–µ–ª—ñ
      const model = await this.modelLoader.load(modelPath);
      this.currentModel = model;
      
      // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –µ—Ñ–µ–∫—Ç—ñ–≤
      this.applyAllEffects(model, modelPath);
      
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ:', error);
      this.hideLoading();
      this.uiManager.showNotification(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${modelPath}: ${error.message}`, 'error');
    }
  }
  
  async loadModelFromFile(file) {
    try {
      this.showLoading();
      this.uiManager.showNotification(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É ${file.name}...`, 'info');
      
      // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –º–æ–¥–µ–ª—ñ
      if (this.currentModel) {
        this.sceneManager.scene.remove(this.currentModel);
        this.glowManager.clearGlowMeshes();
      }
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ –∑ —Ñ–∞–π–ª—É
      const model = await this.modelLoader.loadFromFile(file);
      this.currentModel = model;
      
      // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –µ—Ñ–µ–∫—Ç—ñ–≤
      this.applyAllEffects(model, file.name);
      
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É:', error);
      this.hideLoading();
      this.uiManager.showNotification(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${file.name}: ${error.message}`, 'error');
    }
  }
  
  applyAllEffects(model, modelName) {
    try {
      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ü–µ–Ω–∏
      this.sceneManager.scene.add(model);
      
      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è
      this.sceneManager.addCustomLighting(model);
      
      // –î–æ–¥–∞–≤–∞–Ω–Ω—è glow –µ—Ñ–µ–∫—Ç—É –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
      this.glowManager.addInnerGlow(model);
      
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è bloom —à–∞—Ä—ñ–≤
      this.bloomManager.setupModelLayers(model);
      
      this.hideLoading();
      this.uiManager.showNotification(`${modelName} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!`, 'success');
      console.log(`–ú–æ–¥–µ–ª—å ${modelName} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞`);
      
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –µ—Ñ–µ–∫—Ç—ñ–≤:', error);
      this.hideLoading();
      this.uiManager.showNotification(`–ü–æ–º–∏–ª–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –µ—Ñ–µ–∫—Ç—ñ–≤ –¥–æ ${modelName}`, 'error');
    }
  }
  
  setupUI() {
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç—Ä–æ–ª—ñ–≤ bloom
    this.uiManager.setupBloomControls((params) => {
      this.bloomManager.updateParams(params);
    });
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç—Ä–æ–ª—ñ–≤ glow
    this.uiManager.setupGlowControls((params) => {
      this.glowManager.updateParams(params);
    });
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—É–ª—å—Å–∞—Ü—ñ—ó
    this.uiManager.setupPulseControl((enabled) => {
      this.glowManager.setPulseEnabled(enabled);
    });
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É bloom —Ä–µ–∂–∏–º—É
    this.uiManager.setupBloomModeControl((mode) => {
      this.bloomManager.setMode(mode);
    });
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É glow —Ä–µ–∂–∏–º—É
    this.uiManager.setupGlowModeControl((mode) => {
      this.glowManager.setGlowMode(mode);
      // –ü–µ—Ä–µ–∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ glow –∑ –Ω–æ–≤–∏–º —Ä–µ–∂–∏–º–æ–º
      if (this.currentModel) {
        this.glowManager.addInnerGlow(this.currentModel);
      }
    });
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ
    this.uiManager.setupModelSelector(
      (modelPath) => {
        this.currentModelName = modelPath;
        this.loadModel(modelPath);
      },
      (file) => {
        this.loadModelFromFile(file);
      }
    );
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–≤—ñ—á–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤
    this.uiManager.setupGlowSettings((settings) => {
      this.glowManager.updateGlowSettings(settings);
      // –ü–µ—Ä–µ–∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ glow –∑ –Ω–æ–≤–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
      if (this.currentModel) {
        this.glowManager.addInnerGlow(this.currentModel);
        this.uiManager.showNotification('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–≤—ñ—Ç—ñ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
      }
    });
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è
    this.uiManager.setupCustomLightingControls((params) => {
      this.sceneManager.updateCustomLighting(params);
    });
  }
  
  setupEventListeners() {
    // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
    window.addEventListener('resize', () => {
      this.sceneManager.onWindowResize();
      this.bloomManager.onWindowResize();
    });
  }
  
  setupDragAndDrop() {
    const canvas = this.canvas;
    
    // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ–π –ø–æ–≤–µ–¥—ñ–Ω—Ü—ñ –±—Ä–∞—É–∑–µ—Ä–∞
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      canvas.addEventListener(eventName, (e) => {
        e.preventDefault();
        e.stopPropagation();
      });
    });
    
    // –í—ñ–∑—É–∞–ª—å–Ω—ñ –µ—Ñ–µ–∫—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—ñ
    ['dragenter', 'dragover'].forEach(eventName => {
      canvas.addEventListener(eventName, () => {
        canvas.style.filter = 'brightness(1.2) saturate(1.3)';
        canvas.style.border = '3px dashed #4f9eff';
      });
    });
    
    ['dragleave', 'drop'].forEach(eventName => {
      canvas.addEventListener(eventName, () => {
        canvas.style.filter = '';
        canvas.style.border = '';
      });
    });
    
    // –û–±—Ä–æ–±–∫–∞ drop –ø–æ–¥—ñ—ó
    canvas.addEventListener('drop', (e) => {
      const files = e.dataTransfer.files;
      
      if (files.length > 0) {
        const file = files[0];
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É —Ñ–∞–π–ª—É
        if (file.name.toLowerCase().endsWith('.glb') || file.name.toLowerCase().endsWith('.gltf')) {
          this.uiManager.handleFileUpload(file);
        } else {
          this.uiManager.showNotification('–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ .glb —Ç–∞ .gltf —Ñ–∞–π–ª–∏', 'error');
        }
      }
    });
    
    console.log('üéØ Drag & Drop –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è GLB/GLTF —Ñ–∞–π–ª—ñ–≤');
    
    // üîß –°–µ–∫—Ä–µ—Ç–Ω—ñ –≥–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (Ctrl/Cmd + Shift + S)
    document.addEventListener('keydown', (e) => {
      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'S') {
        e.preventDefault();
        const controlsPanel = document.querySelector('.controls-panel');
        if (controlsPanel) {
          const isHidden = controlsPanel.style.display === 'none';
          controlsPanel.style.display = isHidden ? 'block' : 'none';
          console.log(isHidden ? 'üîß –ü–∞–Ω–µ–ª—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤—ñ–¥–∫—Ä–∏—Ç–∞' : 'üîí –ü–∞–Ω–µ–ª—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞');
        }
      }
    });
  }
  
  showLoading() {
    this.loadingIndicator.classList.remove('hidden');
  }
  
  hideLoading() {
    this.loadingIndicator.classList.add('hidden');
  }
  
  animate() {
    requestAnimationFrame(() => this.animate());
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç—ñ–≤
    this.glowManager.update();
    this.sceneManager.update();
    
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
    this.bloomManager.render();
  }
  
  disposeModel(model) {
    // Helper —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Ç–∞ —ó—ó —Ä–µ—Å—É—Ä—Å—ñ–≤
    if (!model) return;
    
    model.traverse((node) => {
      if (node.geometry) {
        node.geometry.dispose();
      }
      
      if (node.material) {
        const materials = Array.isArray(node.material) ? node.material : [node.material];
        materials.forEach((material) => {
          if (material.map) material.map.dispose();
          if (material.lightMap) material.lightMap.dispose();
          if (material.bumpMap) material.bumpMap.dispose();
          if (material.normalMap) material.normalMap.dispose();
          if (material.specularMap) material.specularMap.dispose();
          if (material.envMap) material.envMap.dispose();
          material.dispose();
        });
      }
    });
  }
  
  async exportModelWithEffects() {
    if (!this.currentModel) {
      this.uiManager.showNotification('‚ùå –ù–µ–º–∞—î –º–æ–¥–µ–ª—ñ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É', 'error');
      return;
    }
    
    try {
      console.log('üöÄ –£–õ–¨–¢–†–ê-–ü–†–û–°–¢–ò–ô GLB –ï–ö–°–ü–û–†–¢ (—Ç—ñ–ª—å–∫–∏ GLB!)...');
      
      // –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç THREE —Ç–∞ GLTFExporter
      const THREE = await import('three');
      const { GLTFExporter } = await import('three/examples/jsm/exporters/GLTFExporter.js');
      const simpleExporter = new GLTFExporter();
      
      console.log('üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –£–õ–¨–¢–†–ê-–ü–†–û–°–¢–û–á –º–æ–¥–µ–ª—ñ...');
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–µ–ª—å –¢–Ü–õ–¨–ö–ò –∑ MeshBasicMaterial (–±–µ–∑ PBR)
      const ultraCleanModel = new THREE.Group();
      ultraCleanModel.name = 'SimpleModel';
      
      let meshCount = 0;
      this.currentModel.traverse((node) => {
        if (node.isMesh && node.geometry) {
          const basicMesh = new THREE.Mesh();
          basicMesh.geometry = node.geometry.clone();
          
          // –ë–ï–ó–ü–ï–ß–ù–ò–ô –º–∞—Ç–µ—Ä—ñ–∞–ª –∑ emissive, –∞–ª–µ –ë–ï–ó volume –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π
          const originalMat = node.material;
          const originalColor = originalMat && originalMat.color ? 
            originalMat.color.clone() : new THREE.Color(0x888888);
          
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î emissive –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
          const hasEmissive = originalMat && (
            (originalMat.emissive && originalMat.emissive.r + originalMat.emissive.g + originalMat.emissive.b > 0) ||
            originalMat.emissiveIntensity > 0
          );
          
          if (hasEmissive) {
            console.log(`  ‚ú® –ó–±–µ—Ä—ñ–≥–∞—î–º–æ emissive –¥–ª—è ${node.name}: ${originalMat.emissive.getHexString()}`);
            
            // MeshStandardMaterial –∑ emissive, –∞–ª–µ –ë–ï–ó volume
            basicMesh.material = new THREE.MeshStandardMaterial({
              name: `EmissiveMaterial_${meshCount}`,
              color: originalColor,
              emissive: originalMat.emissive.clone(),
              emissiveIntensity: originalMat.emissiveIntensity || 1,
              metalness: 0,  // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π metalness
              roughness: 1,  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π roughness –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏
              transparent: originalMat.transparent || false,
              opacity: originalMat.opacity !== undefined ? originalMat.opacity : 1,
              side: THREE.FrontSide
              // –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –¥–æ–¥–∞—î–º–æ transmission, attenuationDistance, thickness!
            });
          } else {
            // –ó–≤–∏—á–∞–π–Ω–∏–π MeshBasicMaterial –¥–ª—è –Ω–µ-emissive –æ–±'—î–∫—Ç—ñ–≤
            basicMesh.material = new THREE.MeshBasicMaterial({
              name: `BasicMaterial_${meshCount}`,
              color: originalColor,
              transparent: originalMat ? originalMat.transparent : false,
              opacity: originalMat ? (originalMat.opacity !== undefined ? originalMat.opacity : 1) : 1,
              side: THREE.FrontSide
            });
          }
          
          basicMesh.name = `Mesh_${meshCount++}`;
          basicMesh.position.copy(node.position);
          basicMesh.rotation.copy(node.rotation);
          basicMesh.scale.copy(node.scale);
          
          ultraCleanModel.add(basicMesh);
        }
      });
      
      console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —É–ª—å—Ç—Ä–∞-–ø—Ä–æ—Å—Ç—É –º–æ–¥–µ–ª—å –∑ ${meshCount} –º–µ—à—ñ–≤`);
      
      // üé¨ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è emissive –∞–Ω—ñ–º–∞—Ü—ñ—ó –¥–ª—è GLB
      console.log('üé¨ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è emissive –ø—É–ª—å—Å–∞—Ü—ñ—ó –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É...');
      
      const animations = [];
      const emissiveMeshes = [];
      
      ultraCleanModel.traverse((child) => {
        if (child.material && child.material.emissiveIntensity > 0) {
          emissiveMeshes.push(child);
          console.log(`  ‚ú® –ó–Ω–∞–π–¥–µ–Ω–æ emissive –º–µ—à: ${child.name}`);
        }
      });
      
      if (emissiveMeshes.length > 0) {
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è keyframe animation –¥–ª—è emissiveIntensity
        const times = [0, 1, 2];  // 2 —Å–µ–∫—É–Ω–¥–∏ —Ü–∏–∫–ª—É
        const values = [1.0, 2.0, 1.0];  // –≤—ñ–¥ 1x –¥–æ 2x —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—ñ
        
        // –°–ø—Ä–æ–±—É—î–º–æ SCALE –∞–Ω—ñ–º–∞—Ü—ñ—é –∑–∞–º—ñ—Å—Ç—å emissive (–±—ñ–ª—å—à —Å—É–º—ñ—Å–Ω–∞ –∑ glTF)
        const scaleAnimation = () => {
          const scaleValues = [];
          const numFrames = 60; // 60 –∫–∞–¥—Ä—ñ–≤ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç—ñ
          
          for (let i = 0; i <= numFrames; i++) {
            const t = (i / numFrames) * Math.PI * 2; // –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª
            const scale = 1.0 + Math.sin(t) * 0.1; // –ü—É–ª—å—Å–∞—Ü—ñ—è 0.9 - 1.1
            scaleValues.push(scale, scale, scale); // x, y, z
          }
          
          const scaleTimes = [];
          for (let i = 0; i <= numFrames; i++) {
            scaleTimes.push((i / numFrames) * 2); // 2 —Å–µ–∫—É–Ω–¥–∏
          }
          
          return { times: scaleTimes, values: scaleValues };
        };
        
        const scaleData = scaleAnimation();
        
        emissiveMeshes.forEach((mesh, index) => {
          // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ scale –∞–Ω—ñ–º–∞—Ü—ñ—é (–±—ñ–ª—å—à —Å—É–º—ñ—Å–Ω–∞ –∑ glTF)
          const trackName = `${mesh.name}.scale`;
          
          const track = new THREE.VectorKeyframeTrack(
            trackName,
            scaleData.times,
            scaleData.values
          );
          
          const clip = new THREE.AnimationClip(`PulseAnimation_${index}`, 2, [track]);
          animations.push(clip);
          console.log(`  üéµ –°—Ç–≤–æ—Ä–µ–Ω–æ SCALE –∞–Ω—ñ–º–∞—Ü—ñ—é: ${trackName}`);
        });
        
        // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—ó –¥–æ –º–æ–¥–µ–ª—ñ
        ultraCleanModel.animations = animations;
        console.log(`‚úÖ –î–æ–¥–∞–Ω–æ ${animations.length} emissive –∞–Ω—ñ–º–∞—Ü—ñ–π`);
        
        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
        console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ animations array:');
        ultraCleanModel.animations.forEach((anim, i) => {
          console.log(`  ${i}: "${anim.name}" (${anim.duration}s, ${anim.tracks.length} tracks)`);
          anim.tracks.forEach((track, j) => {
            console.log(`    Track ${j}: ${track.name} (${track.times.length} keyframes)`);
          });
        });
      } else {
        console.log('‚ÑπÔ∏è Emissive –º–µ—à—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      }
      
      console.log('üßπ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –ø–µ—Ä–µ–¥ –µ–∫—Å–ø–æ—Ä—Ç–æ–º...');
      
      // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤
      ultraCleanModel.traverse((child) => {
        if (child.material) {
          const matType = child.material.constructor.name;
          const hasEmissive = child.material.emissiveIntensity > 0 ? ' ‚ú®' : '';
          console.log(`  üìã ${child.name}: ${matType}${hasEmissive}`);
        }
      });
      
      // –ï–∫—Å–ø–æ—Ä—Ç –∑ –£–õ–¨–¢–†–ê-–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º–∏ –æ–ø—Ü—ñ—è–º–∏ 
      const simpleOptions = {
        binary: true,
        embedImages: false,
        includeCustomExtensions: false,
        onlyVisible: true,
        // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ï –±–ª–æ–∫—É–≤–∞–Ω–Ω—è extensions
        extensionsUsed: [],
        extensionsRequired: [],
        // –ë–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ –∞–Ω—ñ–º–∞—Ü—ñ—è–º–∏
        animations: ultraCleanModel.animations,  // –ü–µ—Ä–µ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—ó —è–≤–Ω–æ
        morphTargets: false,
        // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ —É—Å—ñ –º–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–Ω—ñ extensions  
        truncateDrawRange: true,
        // –ó–∞–±–∏—Ä–∞—î–º–æ materials: 'basic' —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ MeshStandardMaterial
      };
      
      simpleExporter.parse(
        ultraCleanModel,
        (result) => {
          console.log('üì¶ –£—Å–ø—ñ—à–Ω–∏–π –ø—Ä–æ—Å—Ç–∏–π GLB –µ–∫—Å–ø–æ—Ä—Ç!');
          
          const blob = new Blob([result], { type: 'application/octet-stream' });
          const link = document.createElement('a');
          const fileName = `${this.currentModelName.replace(/\.[^/.]+$/, '')}_simple.glb`;
          
          link.href = URL.createObjectURL(blob);
          link.download = fileName;
          link.click();
          
          setTimeout(() => URL.revokeObjectURL(link.href), 100);
          
          console.log(`‚úÖ –ü—Ä–æ—Å—Ç–∏–π GLB –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ: ${fileName}`);
          console.log(`üìä –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: ${(blob.size / 1024 / 1024).toFixed(2)} MB`);
          this.uiManager.showNotification(`‚úÖ –ü—Ä–æ—Å—Ç–∏–π –µ–∫—Å–ø–æ—Ä—Ç: ${fileName}`, 'success');
          
          // –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –º–æ–¥–µ–ª—ñ
          console.log('üßπ –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –º–æ–¥–µ–ª—ñ...');
          ultraCleanModel.traverse((child) => {
            if (child.material) child.material.dispose();
            if (child.geometry) child.geometry.dispose();
          });
        },
        (error) => {
          console.error('‚ùå –ù–∞–≤—ñ—Ç—å –ø—Ä–æ—Å—Ç–∏–π GLB –µ–∫—Å–ø–æ—Ä—Ç –Ω–µ –≤–¥–∞–≤—Å—è:', error);
          console.error('üìã –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:', error.message, error.stack);
          this.uiManager.showNotification('‚ùå GLB –µ–∫—Å–ø–æ—Ä—Ç –Ω–µ –≤–¥–∞–≤—Å—è', 'error');
          
          // –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –º–æ–¥–µ–ª—ñ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
          console.log('üßπ –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –º–æ–¥–µ–ª—ñ (–ø–æ–º–∏–ª–∫–∞)...');
          ultraCleanModel.traverse((child) => {
            if (child.material) child.material.dispose();
            if (child.geometry) child.geometry.dispose();
          });
        },
        simpleOptions
      );
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –µ–∫—Å–ø–æ—Ä—Ç—É:', error);
      this.uiManager.showNotification('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—å', 'error');
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏
const app = new App();

// –ó—Ä–æ–±–∏—Ç–∏ app –¥–æ—Å—Ç—É–ø–Ω–∏–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è UI
window.app = app;
