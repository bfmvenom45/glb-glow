import { SceneManager } from './modules/scene.js';
import { BloomManager } from './modules/bloom.js';
import { GlowManager } from './modules/glow.js';
import { ModelLoader } from './modules/loader.js';
import { UIManager } from './modules/ui.js';

class App {
  constructor() {
    this.canvas = document.getElementById('canvas');
    this.loadingIndicator = document.getElementById('loading-indicator');
    
    this.sceneManager = new SceneManager(this.canvas);
    this.bloomManager = new BloomManager(this.sceneManager);
    this.glowManager = new GlowManager();
    this.modelLoader = new ModelLoader();
    this.uiManager = new UIManager();
    
    this.currentModel = null;
    this.currentModelName = 'House15.glb';
    
    this.init();
  }
  
  async init() {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ü–µ–Ω–∏
    this.sceneManager.init();
    this.bloomManager.init();
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –º–æ–¥–µ–ª—ñ
    await this.loadModel(this.currentModelName);
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è UI
    this.setupUI();
    
    // –ó–∞–ø—É—Å–∫ –∞–Ω—ñ–º–∞—Ü—ñ—ó
    this.animate();
    
    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    this.setupEventListeners();
    
    // Drag & Drop —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
    this.setupDragAndDrop();
  }
  
  async loadModel(modelPath) {
    try {
      this.showLoading();
      this.uiManager.showNotification(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ ${modelPath}...`, 'info');
      
      // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –º–æ–¥–µ–ª—ñ
      if (this.currentModel) {
        this.sceneManager.scene.remove(this.currentModel);
        this.glowManager.clearGlowMeshes();
      }
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –º–æ–¥–µ–ª—ñ
      const model = await this.modelLoader.load(modelPath);
      this.currentModel = model;
      
      // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –µ—Ñ–µ–∫—Ç—ñ–≤
      this.applyAllEffects(model, modelPath);
      
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ:', error);
      this.hideLoading();
      this.uiManager.showNotification(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${modelPath}: ${error.message}`, 'error');
    }
  }
  
  async loadModelFromFile(file) {
    try {
      this.showLoading();
      this.uiManager.showNotification(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É ${file.name}...`, 'info');
      
      // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –º–æ–¥–µ–ª—ñ
      if (this.currentModel) {
        this.sceneManager.scene.remove(this.currentModel);
        this.glowManager.clearGlowMeshes();
      }
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ –∑ —Ñ–∞–π–ª—É
      const model = await this.modelLoader.loadFromFile(file);
      this.currentModel = model;
      
      // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –µ—Ñ–µ–∫—Ç—ñ–≤
      this.applyAllEffects(model, file.name);
      
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É:', error);
      this.hideLoading();
      this.uiManager.showNotification(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${file.name}: ${error.message}`, 'error');
    }
  }
  
  applyAllEffects(model, modelName) {
    try {
      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ü–µ–Ω–∏
      this.sceneManager.scene.add(model);
      
      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è
      this.sceneManager.addCustomLighting(model);
      
      // –î–æ–¥–∞–≤–∞–Ω–Ω—è glow –µ—Ñ–µ–∫—Ç—É –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
      this.glowManager.addInnerGlow(model);
      
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è bloom —à–∞—Ä—ñ–≤
      this.bloomManager.setupModelLayers(model);
      
      this.hideLoading();
      this.uiManager.showNotification(`${modelName} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!`, 'success');
      console.log(`–ú–æ–¥–µ–ª—å ${modelName} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞`);
      
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –µ—Ñ–µ–∫—Ç—ñ–≤:', error);
      this.hideLoading();
      this.uiManager.showNotification(`–ü–æ–º–∏–ª–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –µ—Ñ–µ–∫—Ç—ñ–≤ –¥–æ ${modelName}`, 'error');
    }
  }
  
  setupUI() {
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç—Ä–æ–ª—ñ–≤ bloom
    this.uiManager.setupBloomControls((params) => {
      this.bloomManager.updateParams(params);
    });
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç—Ä–æ–ª—ñ–≤ glow
    this.uiManager.setupGlowControls((params) => {
      this.glowManager.updateParams(params);
    });
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—É–ª—å—Å–∞—Ü—ñ—ó
    this.uiManager.setupPulseControl((enabled) => {
      this.glowManager.setPulseEnabled(enabled);
    });
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É bloom —Ä–µ–∂–∏–º—É
    this.uiManager.setupBloomModeControl((mode) => {
      this.bloomManager.setMode(mode);
    });
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É glow —Ä–µ–∂–∏–º—É
    this.uiManager.setupGlowModeControl((mode) => {
      this.glowManager.setGlowMode(mode);
      // –ü–µ—Ä–µ–∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ glow –∑ –Ω–æ–≤–∏–º —Ä–µ–∂–∏–º–æ–º
      if (this.currentModel) {
        this.glowManager.addInnerGlow(this.currentModel);
      }
    });
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ
    this.uiManager.setupModelSelector(
      (modelPath) => {
        this.currentModelName = modelPath;
        this.loadModel(modelPath);
      },
      (file) => {
        this.loadModelFromFile(file);
      }
    );
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–≤—ñ—á–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤
    this.uiManager.setupGlowSettings((settings) => {
      this.glowManager.updateGlowSettings(settings);
      // –ü–µ—Ä–µ–∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ glow –∑ –Ω–æ–≤–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
      if (this.currentModel) {
        this.glowManager.addInnerGlow(this.currentModel);
        this.uiManager.showNotification('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–≤—ñ—Ç—ñ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
      }
    });
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è
    this.uiManager.setupCustomLightingControls((params) => {
      this.sceneManager.updateCustomLighting(params);
    });
  }
  
  setupEventListeners() {
    // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
    window.addEventListener('resize', () => {
      this.sceneManager.onWindowResize();
      this.bloomManager.onWindowResize();
    });
  }
  
  setupDragAndDrop() {
    const canvas = this.canvas;
    
    // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ–π –ø–æ–≤–µ–¥—ñ–Ω—Ü—ñ –±—Ä–∞—É–∑–µ—Ä–∞
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      canvas.addEventListener(eventName, (e) => {
        e.preventDefault();
        e.stopPropagation();
      });
    });
    
    // –í—ñ–∑—É–∞–ª—å–Ω—ñ –µ—Ñ–µ–∫—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—ñ
    ['dragenter', 'dragover'].forEach(eventName => {
      canvas.addEventListener(eventName, () => {
        canvas.style.filter = 'brightness(1.2) saturate(1.3)';
        canvas.style.border = '3px dashed #4f9eff';
      });
    });
    
    ['dragleave', 'drop'].forEach(eventName => {
      canvas.addEventListener(eventName, () => {
        canvas.style.filter = '';
        canvas.style.border = '';
      });
    });
    
    // –û–±—Ä–æ–±–∫–∞ drop –ø–æ–¥—ñ—ó
    canvas.addEventListener('drop', (e) => {
      const files = e.dataTransfer.files;
      
      if (files.length > 0) {
        const file = files[0];
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É —Ñ–∞–π–ª—É
        if (file.name.toLowerCase().endsWith('.glb') || file.name.toLowerCase().endsWith('.gltf')) {
          this.uiManager.handleFileUpload(file);
        } else {
          this.uiManager.showNotification('–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ .glb —Ç–∞ .gltf —Ñ–∞–π–ª–∏', 'error');
        }
      }
    });
    
    console.log('üéØ Drag & Drop –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è GLB/GLTF —Ñ–∞–π–ª—ñ–≤');
    
    // üîß –°–µ–∫—Ä–µ—Ç–Ω—ñ –≥–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (Ctrl/Cmd + Shift + S)
    document.addEventListener('keydown', (e) => {
      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'S') {
        e.preventDefault();
        const controlsPanel = document.querySelector('.controls-panel');
        if (controlsPanel) {
          const isHidden = controlsPanel.style.display === 'none';
          controlsPanel.style.display = isHidden ? 'block' : 'none';
          console.log(isHidden ? 'üîß –ü–∞–Ω–µ–ª—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤—ñ–¥–∫—Ä–∏—Ç–∞' : 'üîí –ü–∞–Ω–µ–ª—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞');
        }
      }
    });
  }
  
  showLoading() {
    this.loadingIndicator.classList.remove('hidden');
  }
  
  hideLoading() {
    this.loadingIndicator.classList.add('hidden');
  }
  
  animate() {
    requestAnimationFrame(() => this.animate());
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç—ñ–≤
    this.glowManager.update();
    this.sceneManager.update();
    
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
    this.bloomManager.render();
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏
new App();