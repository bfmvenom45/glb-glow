"""
üî• Blender Emission Baking Script
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –ø—Ä–æ—Ü–µ—Å—É –∑–∞–ø—ñ–∫–∞–Ω–Ω—è emission –≤ —Ç–µ–∫—Å—Ç—É—Ä–∏ –¥–ª—è GLB –º–æ–¥–µ–ª–µ–π

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ Blender
2. File > Import > glTF 2.0 (.glb/.gltf) - –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à—É –º–æ–¥–µ–ª—å
3. –í—ñ–¥–∫—Ä–∏–π—Ç–µ Scripting workspace
4. –í—Å—Ç–∞–≤—Ç–µ —Ü–µ–π —Å–∫—Ä–∏–ø—Ç —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Run Script
5. –ì–æ—Ç–æ–≤–∏–π —Ñ–∞–π–ª –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑ —Å—É—Ñ—ñ–∫—Å–æ–º "_baked.glb"

–©–æ —Ä–æ–±–∏—Ç—å —Å–∫—Ä–∏–ø—Ç:
- –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∑ emissive –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏
- –°—Ç–≤–æ—Ä—é—î UV-—Ä–æ–∑–≥–æ—Ä—Ç–∫—É (—è–∫—â–æ –Ω–µ–º–∞—î)
- –ó–∞–ø—ñ–∫–∞—î emission –≤ texture
- –ó–∞–º—ñ–Ω—é—î emissive shader –Ω–∞ texture
- –ï–∫—Å–ø–æ—Ä—Ç—É—î GLB –∑ –∑–∞–ø–µ—á–µ–Ω–∏–º–∏ –µ—Ñ–µ–∫—Ç–∞–º–∏
"""

import bpy
import os
from pathlib import Path

def clear_scene():
    """–û—á–∏—â–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏"""
    bpy.ops.object.select_all(action='SELECT')
    bpy.ops.object.delete()
    
def setup_render_engine():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–Ω–¥–µ—Ä –¥–≤–∏–∂–∫–∞ –¥–ª—è baking"""
    bpy.context.scene.render.engine = 'CYCLES'
    bpy.context.scene.cycles.device = 'GPU' if bpy.context.preferences.addons['cycles'].preferences.has_active_device() else 'CPU'
    bpy.context.scene.cycles.samples = 128  # –î–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–ª—è emission

def has_emission(material):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–∞—î –º–∞—Ç–µ—Ä—ñ–∞–ª emission"""
    if not material.use_nodes:
        return False
    
    for node in material.node_tree.nodes:
        if node.type == 'EMISSION':
            return True
        if node.type == 'BSDF_PRINCIPLED':
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Emission —É Principled BSDF
            emission_input = node.inputs.get('Emission')
            emission_strength = node.inputs.get('Emission Strength')
            if emission_input and emission_input.default_value[0] > 0:
                return True
            if emission_strength and emission_strength.default_value > 0:
                return True
    return False

def create_uv_map(obj):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è UV —Ä–æ–∑–≥–æ—Ä—Ç–∫–∏"""
    if not obj.data.uv_layers:
        print(f"   –°—Ç–≤–æ—Ä–µ–Ω–Ω—è UV –¥–ª—è {obj.name}...")
        bpy.context.view_layer.objects.active = obj
        obj.select_set(True)
        bpy.ops.object.mode_set(mode='EDIT')
        bpy.ops.mesh.select_all(action='SELECT')
        bpy.ops.uv.smart_project(angle_limit=66, island_margin=0.02)
        bpy.ops.object.mode_set(mode='OBJECT')
        return True
    return False

def bake_emission_to_texture(obj, material, texture_size=1024):
    """–ó–∞–ø—ñ–∫–∞–Ω–Ω—è emission –≤ —Ç–µ–∫—Å—Ç—É—Ä—É"""
    print(f"   üî• Baking emission –¥–ª—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É: {material.name}")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Ç–µ–∫—Å—Ç—É—Ä–∏
    image_name = f"{material.name}_emission_baked"
    image = bpy.data.images.new(image_name, texture_size, texture_size, alpha=True)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Image Texture node –¥–ª—è baking
    nodes = material.node_tree.nodes
    bake_node = nodes.new('ShaderNodeTexImage')
    bake_node.image = image
    bake_node.select = True
    nodes.active = bake_node
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –¥–ª—è baking
    bpy.context.view_layer.objects.active = obj
    obj.select_set(True)
    
    # Baking emission
    try:
        bpy.ops.object.bake(
            type='EMIT',
            use_clear=True,
            margin=4,
            use_selected_to_active=False
        )
        print(f"   ‚úÖ Emission –∑–∞–ø–µ—á–µ–Ω–æ –≤ {image_name}")
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ baking: {e}")
        return None
    
    return image

def replace_emission_with_texture(material, baked_image):
    """–ó–∞–º—ñ–Ω–∞ emission shader –Ω–∞ –∑–∞–ø–µ—á–µ–Ω—É —Ç–µ–∫—Å—Ç—É—Ä—É"""
    nodes = material.node_tree.nodes
    links = material.node_tree.links
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ Material Output
    output_node = None
    for node in nodes:
        if node.type == 'OUTPUT_MATERIAL':
            output_node = node
            break
    
    if not output_node:
        return False
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ Image Texture node –∑ –∑–∞–ø–µ—á–µ–Ω–æ—é —Ç–µ–∫—Å—Ç—É—Ä–æ—é
    texture_node = nodes.new('ShaderNodeTexImage')
    texture_node.image = baked_image
    texture_node.location = (-400, 300)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ Emission shader –¥–ª—è –∑–∞–ø–µ—á–µ–Ω–æ—ó —Ç–µ–∫—Å—Ç—É—Ä–∏
    emission_node = nodes.new('ShaderNodeEmission')
    emission_node.location = (-200, 300)
    
    # –ó'—î–¥–Ω—É—î–º–æ: Texture -> Emission -> Output
    links.new(texture_node.outputs['Color'], emission_node.inputs['Color'])
    links.new(emission_node.outputs['Emission'], output_node.inputs['Surface'])
    
    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ emission nodes
    for node in list(nodes):
        if node.type == 'EMISSION' and node != emission_node:
            nodes.remove(node)
        if node.type == 'BSDF_PRINCIPLED':
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ base color, –∞–ª–µ –≤–∏–º–∏–∫–∞—î–º–æ emission
            node.inputs['Emission Strength'].default_value = 0
    
    print(f"   ‚úÖ –ú–∞—Ç–µ—Ä—ñ–∞–ª {material.name} –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ –∑–∞–ø–µ—á–µ–Ω–æ—é —Ç–µ–∫—Å—Ç—É—Ä–æ—é")
    return True

def process_object(obj):
    """–û–±—Ä–æ–±–∫–∞ –æ–¥–Ω–æ–≥–æ –æ–±'—î–∫—Ç–∞"""
    if obj.type != 'MESH':
        return 0
    
    print(f"\nüì¶ –û–±—Ä–æ–±–∫–∞ –æ–±'—î–∫—Ç–∞: {obj.name}")
    baked_count = 0
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ UV
    created_uv = create_uv_map(obj)
    if created_uv:
        print(f"   ‚úÖ UV —Ä–æ–∑–≥–æ—Ä—Ç–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞")
    
    # –û–±—Ä–æ–±–∫–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤
    for slot in obj.material_slots:
        material = slot.material
        if not material:
            continue
        
        if has_emission(material):
            print(f"   üîç –ó–Ω–∞–π–¥–µ–Ω–æ emission –≤ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ: {material.name}")
            
            # Baking emission
            baked_image = bake_emission_to_texture(obj, material)
            if baked_image:
                # –ó–∞–º—ñ–Ω–∞ emission –Ω–∞ texture
                replace_emission_with_texture(material, baked_image)
                baked_count += 1
    
    return baked_count

def bake_emission_for_scene():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è - –æ–±—Ä–æ–±–∫–∞ –≤—Å—ñ—î—ó —Å—Ü–µ–Ω–∏"""
    print("\n" + "="*60)
    print("üî• –ü–û–ß–ê–¢–û–ö –ó–ê–ü–Ü–ö–ê–ù–ù–Ø EMISSION –í –¢–ï–ö–°–¢–£–†–ò")
    print("="*60)
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–Ω–¥–µ—Ä–∞
    setup_render_engine()
    
    # –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö mesh –æ–±'—î–∫—Ç—ñ–≤
    total_baked = 0
    mesh_objects = [obj for obj in bpy.context.scene.objects if obj.type == 'MESH']
    
    if not mesh_objects:
        print("‚ùå –ù–µ–º–∞—î mesh –æ–±'—î–∫—Ç—ñ–≤ —É —Å—Ü–µ–Ω—ñ!")
        return False
    
    print(f"\nüìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(mesh_objects)} –æ–±'—î–∫—Ç—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏\n")
    
    for obj in mesh_objects:
        baked = process_object(obj)
        total_baked += baked
    
    print("\n" + "="*60)
    print(f"‚úÖ –ó–ê–ü–Ü–ö–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û: {total_baked} –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –∑–∞–ø–µ—á–µ–Ω–æ")
    print("="*60 + "\n")
    
    return total_baked > 0

def export_glb_with_baked_emission(output_path=None):
    """–ï–∫—Å–ø–æ—Ä—Ç GLB –∑ –∑–∞–ø–µ—á–µ–Ω–∏–º–∏ –µ—Ñ–µ–∫—Ç–∞–º–∏"""
    if not output_path:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —à–ª—è—Ö –ø–æ—Ç–æ—á–Ω–æ–≥–æ .blend —Ñ–∞–π–ª—É
        blend_file = bpy.data.filepath
        if blend_file:
            output_path = blend_file.replace('.blend', '_baked.glb')
        else:
            output_path = os.path.join(os.path.expanduser('~'), 'Desktop', 'model_baked.glb')
    
    print(f"\nüíæ –ï–∫—Å–ø–æ—Ä—Ç —É: {output_path}")
    
    # –ï–∫—Å–ø–æ—Ä—Ç GLB
    try:
        bpy.ops.export_scene.gltf(
            filepath=output_path,
            export_format='GLB',
            export_image_format='AUTO',
            export_materials='EXPORT',
            export_colors=True,
            export_texcoords=True,
            export_normals=True,
            export_lights=True,
            export_yup=True
        )
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞: {output_path}")
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–∫—Ä–∏–ø—Ç–∞"""
    print("\n" + "üî•"*30)
    print("     BLENDER EMISSION BAKER")
    print("üî•"*30 + "\n")
    
    # Baking –ø—Ä–æ—Ü–µ—Å
    success = bake_emission_for_scene()
    
    if success:
        # –ï–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        export_glb_with_baked_emission()
        print("\nüéâ –ì–æ—Ç–æ–≤–æ! GLB –∑ –∑–∞–ø–µ—á–µ–Ω–∏–º–∏ –µ—Ñ–µ–∫—Ç–∞–º–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ emission –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –¥–ª—è –∑–∞–ø—ñ–∫–∞–Ω–Ω—è")

# ============================================================================
# –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê
# ============================================================================

if __name__ == "__main__":
    main()


# ============================================================================
# –î–û–î–ê–¢–ö–û–í–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–£–ß–ù–û–ì–û –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø
# ============================================================================

def import_and_bake(input_glb_path, output_glb_path=None):
    """
    –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª: —ñ–º–ø–æ—Ä—Ç GLB -> baking -> –µ–∫—Å–ø–æ—Ä—Ç
    
    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    import_and_bake('/path/to/model.glb', '/path/to/output.glb')
    """
    print(f"\nüì• –Ü–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª—ñ: {input_glb_path}")
    
    # –û—á–∏—â–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏
    clear_scene()
    
    # –Ü–º–ø–æ—Ä—Ç GLB
    try:
        bpy.ops.import_scene.gltf(filepath=input_glb_path)
        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
        return False
    
    # Baking
    success = bake_emission_for_scene()
    
    if success:
        # –ï–∫—Å–ø–æ—Ä—Ç
        if not output_glb_path:
            output_glb_path = input_glb_path.replace('.glb', '_baked.glb')
        
        return export_glb_with_baked_emission(output_glb_path)
    
    return False


# –ü—Ä–∏–∫–ª–∞–¥ –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
def batch_bake(input_folder, output_folder=None):
    """
    –ü–∞–∫–µ—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö GLB —Ñ–∞–π–ª—ñ–≤ —É –ø–∞–ø—Ü—ñ
    
    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    batch_bake('/path/to/models/', '/path/to/output/')
    """
    input_path = Path(input_folder)
    output_path = Path(output_folder) if output_folder else input_path
    
    glb_files = list(input_path.glob('*.glb'))
    
    print(f"\nüì¶ –ó–Ω–∞–π–¥–µ–Ω–æ {len(glb_files)} GLB —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏\n")
    
    for glb_file in glb_files:
        output_file = output_path / f"{glb_file.stem}_baked.glb"
        print(f"\n{'='*60}")
        print(f"–û–±—Ä–æ–±–∫–∞: {glb_file.name}")
        print(f"{'='*60}")
        
        import_and_bake(str(glb_file), str(output_file))
    
    print(f"\nüéâ –ü–∞–∫–µ—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
